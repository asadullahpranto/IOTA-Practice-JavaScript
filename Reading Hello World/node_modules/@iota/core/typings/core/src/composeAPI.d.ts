import { HttpClientSettings } from '@iota/http-client';
import * as Promise from 'bluebird';
import { AttachToTangle, BaseCommand, // tslint:disable-line no-unused-variable
Inputs, // tslint:disable-line no-unused-variable
Neighbor, // tslint:disable-line no-unused-variable
Provider, // tslint:disable-line no-unused-variable
Transaction, // tslint:disable-line no-unused-variable
Transfer } from '../../types';
import { AccountData, // tslint:disable-line no-unused-variable
Balances, // tslint:disable-line no-unused-variable
CheckConsistencyOptions, FindTransactionsQuery, // tslint:disable-line no-unused-variable
GetAccountDataOptions, // tslint:disable-line no-unused-variable
GetInputsOptions, // tslint:disable-line no-unused-variable
GetNewAddressOptions, // tslint:disable-line no-unused-variable
GetNodeInfoResponse, // tslint:disable-line no-unused-variable
PrepareTransfersOptions, // tslint:disable-line no-unused-variable
PromoteTransactionOptions, // tslint:disable-line no-unused-variable
TransactionsToApprove } from './';
import { GetTransfersOptions } from './createGetTransfers';
export interface Settings extends HttpClientSettings {
    readonly network?: Provider;
    readonly attachToTangle?: AttachToTangle;
}
export declare type Func<T> = (...args: any[]) => T;
export declare function returnType<T>(func: Func<T>): T;
/**
 * Composes API object from it's components
 *
 * @method composeApi
 *
 * @memberof module:core
 *
 * @param {object} [settings={}] - Connection settings
 * @param {Provider} [settings.network] - Network provider, defaults to `http-client`.
 * @param {string} [settings.provider=http://localhost:14265] Uri of IRI node
 * @param {function} [settings.attachToTangle] - Function to override
 * [`attachToTangle`]{@link #module_core.attachToTangle} with
 * @param {string | number} [settings.apiVersion=1] - IOTA Api version to be sent as `X-IOTA-API-Version` header.
 * @param {number} [settings.requestBatchSize=1000] - Number of search values per request.
 *
 * @return {API}
 */
export declare const composeAPI: (settings?: Partial<Settings>) => {
    addNeighbors: (uris: ReadonlyArray<string>, callback?: import(".").Callback<number> | undefined) => Promise<number>;
    attachToTangle: AttachToTangle;
    broadcastTransactions: (trytes: ReadonlyArray<string>, callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    checkConsistency: (transactions: string | ReadonlyArray<string>, options?: CheckConsistencyOptions | undefined, callback?: import(".").Callback<boolean> | undefined) => Promise<boolean>;
    findTransactions: (query: FindTransactionsQuery, callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    getBalances: (addresses: ReadonlyArray<string>, threshold: number, tips?: ReadonlyArray<string> | undefined, callback?: import(".").Callback<Balances> | undefined) => Promise<Balances>;
    getInclusionStates: (transactions: ReadonlyArray<string>, tips: ReadonlyArray<string>, callback?: import(".").Callback<ReadonlyArray<boolean>> | undefined) => Promise<ReadonlyArray<boolean>>;
    getNeighbors: (callback?: import(".").Callback<ReadonlyArray<Neighbor>> | undefined) => Promise<ReadonlyArray<Neighbor>>;
    getNodeInfo: (callback?: import(".").Callback<GetNodeInfoResponse> | undefined) => Promise<GetNodeInfoResponse>;
    getTips: (callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    getTransactionsToApprove: (depth: number, reference?: string | undefined, callback?: import(".").Callback<TransactionsToApprove> | undefined) => Promise<TransactionsToApprove>;
    getTrytes: (hashes: ReadonlyArray<string>, callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    interruptAttachingToTangle: (callback?: import(".").Callback<void> | undefined) => Promise<void>;
    removeNeighbors: (uris: ReadonlyArray<string>, callback?: import(".").Callback<number> | undefined) => Promise<number>;
    storeTransactions: (trytes: ReadonlyArray<string>, callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    sendCommand: <C extends BaseCommand, R>(command: Readonly<C>, callback?: import(".").Callback<Readonly<R>> | undefined) => Promise<Readonly<R>>;
    broadcastBundle: (tailTransactionHash: string, callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    getAccountData: (seed: string, options?: Partial<GetAccountDataOptions>, callback?: import(".").Callback<AccountData> | undefined) => Promise<AccountData>;
    getBundle: (tailTransactionHash: string, callback?: import(".").Callback<ReadonlyArray<Transaction>> | undefined) => Promise<ReadonlyArray<Transaction>>;
    getBundlesFromAddresses: (addresses: ReadonlyArray<string>, inclusionStates?: boolean | undefined, callback?: import(".").Callback<ReadonlyArray<ReadonlyArray<Transaction>>> | undefined) => Promise<ReadonlyArray<ReadonlyArray<Transaction>>>;
    getLatestInclusion: (transactions: ReadonlyArray<string>, callback?: import(".").Callback<ReadonlyArray<boolean>> | undefined) => Promise<ReadonlyArray<boolean>>;
    getNewAddress: (seed: string, options?: Partial<GetNewAddressOptions>, callback?: import(".").Callback<string | ReadonlyArray<string>> | undefined) => Promise<string | ReadonlyArray<string>>;
    getTransactionObjects: (hashes: ReadonlyArray<string>, callback?: import(".").Callback<ReadonlyArray<Transaction>> | undefined) => Promise<ReadonlyArray<Transaction>>;
    findTransactionObjects: (query: FindTransactionsQuery, callback?: import(".").Callback<ReadonlyArray<Transaction>> | undefined) => Promise<ReadonlyArray<Transaction>>;
    getInputs: (seed: string, options?: Partial<GetInputsOptions>, callback?: import(".").Callback<Inputs> | undefined) => Promise<Inputs>;
    getTransfers: (seed: string, options?: Partial<GetTransfersOptions>, callback?: import(".").Callback<ReadonlyArray<ReadonlyArray<Transaction>>> | undefined) => Promise<ReadonlyArray<ReadonlyArray<Transaction>>>;
    isPromotable: (tail: string, callback?: import(".").Callback<boolean> | undefined) => Promise<boolean>;
    isReattachable: (inputAddresses: string | ReadonlyArray<string>, callback?: import(".").Callback<boolean | ReadonlyArray<boolean>> | undefined) => Promise<boolean | ReadonlyArray<boolean>>;
    prepareTransfers: (seed: string | Int8Array, transfers: ReadonlyArray<Transfer>, options?: Partial<PrepareTransfersOptions>, callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    promoteTransaction: (tailTransaction: string, depth: number, minWeightMagnitude: number, spamTransfers?: ReadonlyArray<Transfer>, options?: Partial<PromoteTransactionOptions> | undefined, callback?: import(".").Callback<ReadonlyArray<ReadonlyArray<Transaction>>> | undefined) => Promise<import("../../types").Maybe<ReadonlyArray<ReadonlyArray<Transaction>>>>;
    replayBundle: (tail: string, depth: number, minWeightMagnitude: number, reference?: string | undefined, callback?: import(".").Callback<ReadonlyArray<Transaction>> | undefined) => Promise<ReadonlyArray<Transaction>>;
    sendTrytes: (trytes: ReadonlyArray<string>, depth: number, minWeightMagnitude: number, reference?: string | undefined, callback?: import(".").Callback<ReadonlyArray<Transaction>> | undefined) => Promise<ReadonlyArray<Transaction>>;
    storeAndBroadcast: (trytes: ReadonlyArray<string>, callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    traverseBundle: (trunkTransaction: string, bundle?: ReadonlyArray<Transaction>, callback?: import(".").Callback<ReadonlyArray<Transaction>> | undefined) => Promise<ReadonlyArray<Transaction>>;
    setSettings: (newSettings?: Partial<Settings>) => void;
    overrideAttachToTangle: (attachFn: AttachToTangle) => void;
    overrideNetwork: (network: Provider) => void;
};
export declare const apiType: {
    addNeighbors: (uris: ReadonlyArray<string>, callback?: import(".").Callback<number> | undefined) => Promise<number>;
    attachToTangle: AttachToTangle;
    broadcastTransactions: (trytes: ReadonlyArray<string>, callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    checkConsistency: (transactions: string | ReadonlyArray<string>, options?: CheckConsistencyOptions | undefined, callback?: import(".").Callback<boolean> | undefined) => Promise<boolean>;
    findTransactions: (query: FindTransactionsQuery, callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    getBalances: (addresses: ReadonlyArray<string>, threshold: number, tips?: ReadonlyArray<string> | undefined, callback?: import(".").Callback<Balances> | undefined) => Promise<Balances>;
    getInclusionStates: (transactions: ReadonlyArray<string>, tips: ReadonlyArray<string>, callback?: import(".").Callback<ReadonlyArray<boolean>> | undefined) => Promise<ReadonlyArray<boolean>>;
    getNeighbors: (callback?: import(".").Callback<ReadonlyArray<Neighbor>> | undefined) => Promise<ReadonlyArray<Neighbor>>;
    getNodeInfo: (callback?: import(".").Callback<GetNodeInfoResponse> | undefined) => Promise<GetNodeInfoResponse>;
    getTips: (callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    getTransactionsToApprove: (depth: number, reference?: string | undefined, callback?: import(".").Callback<TransactionsToApprove> | undefined) => Promise<TransactionsToApprove>;
    getTrytes: (hashes: ReadonlyArray<string>, callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    interruptAttachingToTangle: (callback?: import(".").Callback<void> | undefined) => Promise<void>;
    removeNeighbors: (uris: ReadonlyArray<string>, callback?: import(".").Callback<number> | undefined) => Promise<number>;
    storeTransactions: (trytes: ReadonlyArray<string>, callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    sendCommand: <C extends BaseCommand, R>(command: Readonly<C>, callback?: import(".").Callback<Readonly<R>> | undefined) => Promise<Readonly<R>>;
    broadcastBundle: (tailTransactionHash: string, callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    getAccountData: (seed: string, options?: Partial<GetAccountDataOptions>, callback?: import(".").Callback<AccountData> | undefined) => Promise<AccountData>;
    getBundle: (tailTransactionHash: string, callback?: import(".").Callback<ReadonlyArray<Transaction>> | undefined) => Promise<ReadonlyArray<Transaction>>;
    getBundlesFromAddresses: (addresses: ReadonlyArray<string>, inclusionStates?: boolean | undefined, callback?: import(".").Callback<ReadonlyArray<ReadonlyArray<Transaction>>> | undefined) => Promise<ReadonlyArray<ReadonlyArray<Transaction>>>;
    getLatestInclusion: (transactions: ReadonlyArray<string>, callback?: import(".").Callback<ReadonlyArray<boolean>> | undefined) => Promise<ReadonlyArray<boolean>>;
    getNewAddress: (seed: string, options?: Partial<GetNewAddressOptions>, callback?: import(".").Callback<string | ReadonlyArray<string>> | undefined) => Promise<string | ReadonlyArray<string>>;
    getTransactionObjects: (hashes: ReadonlyArray<string>, callback?: import(".").Callback<ReadonlyArray<Transaction>> | undefined) => Promise<ReadonlyArray<Transaction>>;
    findTransactionObjects: (query: FindTransactionsQuery, callback?: import(".").Callback<ReadonlyArray<Transaction>> | undefined) => Promise<ReadonlyArray<Transaction>>;
    getInputs: (seed: string, options?: Partial<GetInputsOptions>, callback?: import(".").Callback<Inputs> | undefined) => Promise<Inputs>;
    getTransfers: (seed: string, options?: Partial<GetTransfersOptions>, callback?: import(".").Callback<ReadonlyArray<ReadonlyArray<Transaction>>> | undefined) => Promise<ReadonlyArray<ReadonlyArray<Transaction>>>;
    isPromotable: (tail: string, callback?: import(".").Callback<boolean> | undefined) => Promise<boolean>;
    isReattachable: (inputAddresses: string | ReadonlyArray<string>, callback?: import(".").Callback<boolean | ReadonlyArray<boolean>> | undefined) => Promise<boolean | ReadonlyArray<boolean>>;
    prepareTransfers: (seed: string | Int8Array, transfers: ReadonlyArray<Transfer>, options?: Partial<PrepareTransfersOptions>, callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    promoteTransaction: (tailTransaction: string, depth: number, minWeightMagnitude: number, spamTransfers?: ReadonlyArray<Transfer>, options?: Partial<PromoteTransactionOptions> | undefined, callback?: import(".").Callback<ReadonlyArray<ReadonlyArray<Transaction>>> | undefined) => Promise<import("../../types").Maybe<ReadonlyArray<ReadonlyArray<Transaction>>>>;
    replayBundle: (tail: string, depth: number, minWeightMagnitude: number, reference?: string | undefined, callback?: import(".").Callback<ReadonlyArray<Transaction>> | undefined) => Promise<ReadonlyArray<Transaction>>;
    sendTrytes: (trytes: ReadonlyArray<string>, depth: number, minWeightMagnitude: number, reference?: string | undefined, callback?: import(".").Callback<ReadonlyArray<Transaction>> | undefined) => Promise<ReadonlyArray<Transaction>>;
    storeAndBroadcast: (trytes: ReadonlyArray<string>, callback?: import(".").Callback<ReadonlyArray<string>> | undefined) => Promise<ReadonlyArray<string>>;
    traverseBundle: (trunkTransaction: string, bundle?: ReadonlyArray<Transaction>, callback?: import(".").Callback<ReadonlyArray<Transaction>> | undefined) => Promise<ReadonlyArray<Transaction>>;
    setSettings: (newSettings?: Partial<Settings>) => void;
    overrideAttachToTangle: (attachFn: AttachToTangle) => void;
    overrideNetwork: (network: Provider) => void;
};
export declare type API = typeof apiType;
